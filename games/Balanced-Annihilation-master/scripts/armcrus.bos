#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel1, flare1, barrel2, flare2, cannon1, cannon2,
       wake1, wake2, foreturret, foregun, forecannon, foreflare, aftturret, aftcannon, aftgun, aftflare, foregun2, forecannon2, foreflare2, aftcannon2, aftgun2, aftflare2, ground;

static-var  gun_1, restore_delay, gun_2, Static_Var_7, Static_Var_8, aimDir, oldHead, aft_gun, fore_gun;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_AIM_2			4
#define SIG_AIM				8
#define SIG_MOVE			16


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*4;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 32;
	set-signal-mask 32;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	aft_gun = 1;
	fore_gun = 1;
	gun_1 = base;
	gun_2 = base;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <55.000000>;
	turn barrel1 to x-axis <0.000000> speed <15.000000>;
	turn barrel2 to x-axis <0.000000> speed <15.000000>;
}

RestoreDeckLaser()
{
	sleep 3000;
	set-signal-mask 0;
	turn foreturret to y-axis <0.000000> speed <150.000000>;
	turn foregun to x-axis <0.000000> speed <100.000000>;
	turn aftturret to y-axis <0.000000> speed <150.000000>;
	turn aftgun to x-axis <0.000000> speed <100.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.32] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
		if (aft_gun == 1)
			{
			turn aftturret to y-axis heading speed <300.000000>;
			turn aftgun to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn aftturret around y-axis;
			wait-for-turn aftgun around x-axis;
			start-script RestoreDeckLaser();
			return (1);
			}
		else
			{
			turn aftturret to y-axis heading speed <300.000000>;
			turn aftgun2 to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn aftturret around y-axis;
			wait-for-turn aftgun2 around x-axis;
			start-script RestoreDeckLaser();
			return (1);
			}
}

FireSecondary()
{

			if (aft_gun == 2)
			{
				move aftcannon to z-axis [-2] now;
				move aftcannon to z-axis [0] speed [50];
				aft_gun = 1;
			}
			else
			{
				move aftcannon2 to z-axis [-2] now;
				move aftcannon2 to z-axis [0] speed [50];
				aft_gun = 2;
			}
}

AimFromSecondary(piecenum)
{
		piecenum = aftturret;
}

QuerySecondary(piecenum)
{
	if (aft_gun == 1)
		{
		piecenum = aftflare;
		}
		else
		{
		piecenum = aftflare2;
		}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
		if (fore_gun == 1)
			{
			turn foreturret to y-axis heading speed <300.000000>;
			turn foregun to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn foreturret around y-axis;
			wait-for-turn foregun around x-axis;
			start-script RestoreDeckLaser();
			return (1);
			}
		else
			{
			turn foreturret to y-axis heading speed <300.000000>;
			turn foregun2 to x-axis <0.000000> - pitch speed <200.000000>;
			wait-for-turn foreturret around y-axis;
			wait-for-turn foregun2 around x-axis;
			start-script RestoreDeckLaser();
			return (1);
			}
}

FireTertiary()
{

			if (fore_gun == 2)
			{
				move forecannon to z-axis [-2] now;
				move forecannon to z-axis [0] speed [50];
				fore_gun = 1;
			}
			else
			{
				move forecannon2 to z-axis [-2] now;
				move forecannon2 to z-axis [0] speed [50];
				fore_gun = 2;
			}
}

AimFromTertiary(piecenum)
{
		piecenum = foreturret;
}

QueryTertiary(piecenum)
{
	if (fore_gun == 1)
		{
		piecenum = foreflare;
		}
		else
		{
		piecenum = foreflare2;
		}
}

AimWeapon4(heading, pitch)
{
	return (1);
}

FireWeapon4()
{
	sleep 150;
}

AimFromWeapon4(piecenum)
{
	piecenum = base;
}

QueryWeapon4(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <110.000000>;
	turn cannon1 to x-axis <0.000000> - pitch speed <90.000000>;
	turn cannon2 to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn cannon1 around x-axis;
	wait-for-turn cannon2 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	start-script RockZ(-5, aimDir);
	if( gun_1 )
	{
		emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-2.300000] now;
		move barrel2 to z-axis [0.000000] speed [2.50000];
	}
	else
	{
		emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-2.300000] now;
		move barrel1 to z-axis [0.000000] speed [2.500000];
	}
}

AimFromPrimary(piecenum)
{
	gun_1 = !gun_1;
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = flare2;
	}
	else
	{
		piecenum = flare1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		//explode base type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode barrel2 type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		//explode base type FALL | NOHEATCLOUD;
		//explode turret type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		//explode foreturret type FALL | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		//explode aftturret type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode foregun type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode aftgun type FALL | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	//explode base type FALL | NOHEATCLOUD;
	//explode turret type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	//explode foreturret type FALL | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	//explode aftturret type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode foregun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode aftgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
