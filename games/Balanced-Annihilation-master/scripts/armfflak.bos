#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, Xturret, barrel1, barrel2, Yturret;

static-var  gun_1, rockframe, Xrot, Zrot, Ymove;

// Signal definitions
#define SIG_AIM				2

RockOnWaves()
{
rockframe = 1;
while ( TRUE )
{
	Xrot = (get KCOS (rockframe * 690)) * 360 / 1024 ;
	Ymove = (get KSIN (rockframe * 650)) * 2;
	Zrot = (get KSIN (rockframe * 560)) * 360 / 1024;
	turn base to x-axis Xrot now;
	turn base to z-axis Zrot now;
	move base to y-axis Ymove now;
	rockframe = rockframe + 1;
	sleep 1;
}
}
SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache Yturret;
	dont-cache Xturret;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade Yturret;
	dont-shade Xturret;
	gun_1 = flare1;
	start-script SmokeUnit();
	start-script RockOnWaves();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn Xturret to y-axis heading speed <700.17033>;
	turn Yturret to x-axis <0.00000> - pitch speed <550.13187>;
	wait-for-turn Xturret around y-axis;
	wait-for-turn Yturret around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-5.50000] now;
		sleep 50;
		move barrel1 to z-axis [0.00000] speed [25.0000];
	}
	if( gun_1 == 1 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-5.50000] now;
		sleep 50;
		move barrel2 to z-axis [0.00000] speed [25.0000];
	}
	gun_1 = !gun_1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = Xturret;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1 | NOHEATCLOUD;
		explode barrel2 type FALL | BITMAP2 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode flare1 type FALL | BITMAP4 | NOHEATCLOUD;
		explode flare1 type FALL | BITMAP5 | NOHEATCLOUD;
		explode Yturret type SHATTER | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
		explode Yturret type SHATTER | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode base type SHATTER | NOHEATCLOUD;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	explode Yturret type SHATTER | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	return (corpsetype);
}
